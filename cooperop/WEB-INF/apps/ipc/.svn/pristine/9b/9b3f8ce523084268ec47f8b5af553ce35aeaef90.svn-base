开发规范建议 v1.0.0

# 开发文档
1. 功能，需求描述（为什么做，做什么，限制条件如在基于xx平台运行等）
2. 功能目标 （具体需要实现到哪一步）
3. 功能点整理 （具体需要做那些内容）
   > [3.1 如果是模块，需要功能列表]
4. 相关设计图 或 流程 或 实现思路
   > [4.1 如果是流程，需要提供，用户工作方式说明，如流程图]
5. 相关数据设计
6. 相关源代码的位置
7. 版本变更记录


# 数据库
1. 表名，字段名小写，字段含义备注，表中文名备注
2. 字段长度预测，字符串不能超过实际值长度太多
3. 合理使用视图，减少sql语句复杂度
4. 在常用字段上增加索引提升查询效率（最好不要使用难以排序的字段作为索引）
5. 并发访问较高的表，减少修改，删除等锁表操作（大字段可使用子表，存文件，缓存延时写入等），自增主键可提高插入效率，设置行隔离；
   需要对表数据转存历史表，以减少数据量
6. 存储过程编写时，注意是否可能会造成死锁


# java
1. 方法在不确定是否一定有参数的情况下必须验参
2. 报错和日志记录使用log记录日志文件，禁止直接输出控制台
3. 流程错误捕获，节点不得导致程序直接崩溃
4. 减少使用jstl标签
5. 减少使用el表达式
6. 提倡驼峰命名
7. 必要的地方添加注释
8. 方法拆分 （单个方法不要超过100行）
9. 使用return，continue 等 降低 if 嵌套层次
10. url 需遵循 RFC 3986 (a-z, A-Z, 0-9, [-_.~]), 保留字符：! * ' ( ) ; : @ & = + $ , / ? # [ ]

## 设计模式
### 单例
1. 无可变共享资源时，可使用单例，注意多线程同时检测null创建问题
2. 需要频繁实例化然后销毁的对象。
3. 创建对象时耗时过多或者耗资源过多，但又经常用到的对象。
4. 有状态的工具类对象。
5. 频繁访问数据库或文件的对象

## 线程安全的数据结构
1. ConcurrentHashMap 线程安全map
2. CopyOnWriteArrayList 线程安全list
3. CopyOnWriteArraySet 线程安全set

## 线程池 建议使用线程池对线程进行管理
> 建议对线程进行命名，方便在jvm可视化工具中定位线程
> 四种常见的线程池
1. CachedThreadPool 可缓存的线程池，该线程池中没有核心线程，非核心线程的数量为Integer.max_value，
   就是无限大，当有需要时创建线程来执行任务，没有需要时回收线程，适用于耗时少，任务量大的情况
2. SecudleThreadPool 周期性执行任务的线程池，按照某种特定的计划执行线程中的任务，有核心线程，但也有非核心线程，
    非核心线程的大小也为无限大。适用于执行周期性的任务。
3. SingleThreadPool 只有一条线程来执行任务，适用于有顺序的任务的应用场景。
4. FixedThreadPool 定长的线程池，有核心线程，核心线程的即为最大的线程数量，没有非核心线程


# .js .html .css
1. 一个js只申明一个对象变量，其他变量使用属性
2. 使用return,continue 等  降低 if 嵌套层次

# 良好的时间管理
